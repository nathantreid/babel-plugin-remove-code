'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _debugger = require("./modules/debugger.js");

var _function = require("./modules/function.js");

var _var = require("./modules/var.js");

var _export = require("./modules/export.js");

var _import = require("./modules/import.js");

// -----------------------------------------
// Functions

/**
 * Proceed with the function
 *
 * @param {object} t
 * @param {array} opts
 * @param {object} path
 * @param {function} fn
 */
const proceed = (t, opts = [], path, fn) => {
  const checkedOpts = opts.filter(val => !!val);
  checkedOpts.length && fn(t, checkedOpts, path);
}; // -----------------------------------------
// Export


function _default({
  types: t
}) {
  return {
    visitor: {
      // TODO: What about empty vars? Or unset vars?
      // Vars
      VariableDeclarator(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      AssignmentExpression(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      LogicalExpression(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      BinaryExpression(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      MemberExpression(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      Identifier(path) {
        proceed(t, this.opts.var, path, _var.remove);
      },

      // Debugger
      DebuggerStatement(path) {
        const opts = this.opts.debugger;
        opts && (0, _debugger.remove)(t, opts, path);
      },

      // Imports
      ImportDeclaration(path) {
        proceed(t, this.opts.import, path, _import.remove);
      },

      // Exports
      ExportDefaultDeclaration(path) {
        proceed(t, [].concat(this.opts.export, this.opts.var), path, _export.remove);
      },

      ExportNamedDeclaration(path) {
        proceed(t, [].concat(this.opts.export, this.opts.var), path, _export.remove);
      },

      // Functions
      CallExpression(path) {
        proceed(t, this.opts.function, path, _function.remove);
        proceed(t, this.opts.var, path, _function.removeByArg);
      },

      FunctionDeclaration(path) {
        proceed(t, this.opts.function, path, _function.remove);
      },

      FunctionExpression(path) {
        proceed(t, this.opts.function, path, _function.remove);
      }

    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9jZWVkIiwidCIsIm9wdHMiLCJwYXRoIiwiZm4iLCJjaGVja2VkT3B0cyIsImZpbHRlciIsInZhbCIsImxlbmd0aCIsInR5cGVzIiwidmlzaXRvciIsIlZhcmlhYmxlRGVjbGFyYXRvciIsInZhciIsInJlbW92ZVZhciIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwiTG9naWNhbEV4cHJlc3Npb24iLCJCaW5hcnlFeHByZXNzaW9uIiwiTWVtYmVyRXhwcmVzc2lvbiIsIklkZW50aWZpZXIiLCJEZWJ1Z2dlclN0YXRlbWVudCIsImRlYnVnZ2VyIiwiSW1wb3J0RGVjbGFyYXRpb24iLCJpbXBvcnQiLCJyZW1vdmVJbXBvcnQiLCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24iLCJjb25jYXQiLCJleHBvcnQiLCJyZW1vdmVFeHBvcnQiLCJFeHBvcnROYW1lZERlY2xhcmF0aW9uIiwiQ2FsbEV4cHJlc3Npb24iLCJmdW5jdGlvbiIsInJlbW92ZUZ1bmN0aW9uIiwicmVtb3ZlRnVuY3Rpb25CeUFyZyIsIkZ1bmN0aW9uRGVjbGFyYXRpb24iLCJGdW5jdGlvbkV4cHJlc3Npb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFRQSxNQUFNQSxPQUFPLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFJLEdBQUcsRUFBWCxFQUFlQyxJQUFmLEVBQXFCQyxFQUFyQixLQUE0QjtBQUN4QyxRQUFNQyxXQUFXLEdBQUdILElBQUksQ0FBQ0ksTUFBTCxDQUFZQyxHQUFHLElBQUksQ0FBQyxDQUFDQSxHQUFyQixDQUFwQjtBQUNBRixFQUFBQSxXQUFXLENBQUNHLE1BQVosSUFBc0JKLEVBQUUsQ0FBQ0gsQ0FBRCxFQUFJSSxXQUFKLEVBQWlCRixJQUFqQixDQUF4QjtBQUNILENBSEQsQyxDQUtBO0FBQ0E7OztBQUVlLGtCQUFVO0FB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Q0gsT0F6Q0k7O0FBMENMQyxNQUFBQSxtQkFBbUIsQ0FBQzlCLElBQUQsRUFBTztBQUN0QkgsUUFBQUEsT0FBTyxDQUFDQyxDQUFELEVBQUksS0FBS0MsSUFBTCxDQUFVNEIsUUFBZCxFQUF3QjNCLElBQXhCLEVBQThCNEIsZ0JBQTlCLENBQVA7QUFDSCxPQTVDSTs7QUE2Q0xHLE1BQUFBLGtCQUFrQixDQUFDL0IsSUFBRCxFQUFPO0FBQ3JCSCxRQUFBQSxPQUFPLENBQUNDLENBQUQsRUFBSSxLQUFLQyxJQUFMLENBQVU0QixRQUFkLEVBQXdCM0IsSUFBeEIsRUFBOEI0QixnQkFBOUIsQ0FBUDtBQUNIOztBQS9DSTtBQUROLEdBQVA7QUFtREgiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IHJlbW92ZSBhcyByZW1vdmVEZWJ1Z2dlciB9IGZyb20gJy4vbW9kdWxlcy9kZWJ1Z2dlci5qcyc7XG5pbXBvcnQgeyByZW1vdmUgYXMgcmVtb3ZlRnVuY3Rpb24sIHJlbW92ZUJ5QXJnIGFzIHJlbW92ZUZ1bmN0aW9uQnlBcmcgfSBmcm9tICcuL21vZHVsZXMvZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVtb3ZlIGFzIHJlbW92ZVZhciB9IGZyb20gJy4vbW9kdWxlcy92YXIuanMnO1xuaW1wb3J0IHsgcmVtb3ZlIGFzIHJlbW92ZUV4cG9ydCB9IGZyb20gJy4vbW9kdWxlcy9leHBvcnQuanMnO1xuaW1wb3J0IHsgcmVtb3ZlIGFzIHJlbW92ZUltcG9ydCB9IGZyb20gJy4vbW9kdWxlcy9pbXBvcnQuanMnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRnVuY3Rpb25zXG5cbi8qKlxuICogUHJvY2VlZCB3aXRoIHRoZSBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0XG4gKiBAcGFyYW0ge2FycmF5fSBvcHRzXG4gKiBAcGFyYW0ge29iamVjdH0gcGF0aFxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqL1xuY29uc3QgcHJvY2VlZCA9ICh0LCBvcHRzID0gW10sIHBhdGgsIGZuKSA9PiB7XG4gICAgY29uc3QgY2hlY2tlZE9wdHMgPSBvcHRzLmZpbHRlcih2YWwgPT4gISF2YWwpO1xuICAgIGNoZWNrZWRPcHRzLmxlbmd0aCAmJiBmbih0LCBjaGVja2VkT3B0cywgcGF0aCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh7IHR5cGVzOiB0IH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB2aXNpdG9yOiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBXaGF0IGFib3V0IGVtcHR5IHZhcnM/IE9yIHVuc2V0IHZhcnM/XG4gICAgICAgICAgICAvLyBWYXJzXG4gICAgICAgICAgICBWYXJpYWJsZURlY2xhcmF0b3IocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgdGhpcy5vcHRzLnZhciwgcGF0aCwgcmVtb3ZlVmFyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBc3NpZ25tZW50RXhwcmVzc2lvbihwYXRoKSB7XG4gICAgICAgICAgICAgICAgcHJvY2VlZCh0LCB0aGlzLm9wdHMudmFyLCBwYXRoLCByZW1vdmVWYXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIExvZ2ljYWxFeHByZXNzaW9uKHBhdGgpIHtcbiAgICAgICAgICAgICAgICBwcm9jZWVkKHQsIHRoaXMub3B0cy52YXIsIHBhdGgsIHJlbW92ZVZhcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQmluYXJ5RXhwcmVzc2lvbihwYXRoKSB7XG4gICAgICAgICAgICAgICAgcHJvY2VlZCh0LCB0aGlzLm9wdHMudmFyLCBwYXRoLCByZW1vdmVWYXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE1lbWJlckV4cHJlc3Npb24ocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgdGhpcy5vcHRzLnZhciwgcGF0aCwgcmVtb3ZlVmFyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBJZGVudGlmaWVyKHBhdGgpIHtcbiAgICAgICAgICAgICAgICBwcm9jZWVkKHQsIHRoaXMub3B0cy52YXIsIHBhdGgsIHJlbW92ZVZhcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRGVidWdnZXJcbiAgICAgICAgICAgIERlYnVnZ2VyU3RhdGVtZW50KHBhdGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRzLmRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIG9wdHMgJiYgcmVtb3ZlRGVidWdnZXIodCwgb3B0cywgcGF0aCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gSW1wb3J0c1xuICAgICAgICAgICAgSW1wb3J0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgdGhpcy5vcHRzLmltcG9ydCwgcGF0aCwgcmVtb3ZlSW1wb3J0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBFeHBvcnRzXG4gICAgICAgICAgICBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgW10uY29uY2F0KHRoaXMub3B0cy5leHBvcnQsIHRoaXMub3B0cy52YXIpLCBwYXRoLCByZW1vdmVFeHBvcnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEV4cG9ydE5hbWVkRGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgW10uY29uY2F0KHRoaXMub3B0cy5leHBvcnQsIHRoaXMub3B0cy52YXIpLCBwYXRoLCByZW1vdmVFeHBvcnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEZ1bmN0aW9uc1xuICAgICAgICAgICAgQ2FsbEV4cHJlc3Npb24ocGF0aCkge1xuICAgICAgICAgICAgICAgIHByb2NlZWQodCwgdGhpcy5vcHRzLmZ1bmN0aW9uLCBwYXRoLCByZW1vdmVGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgcHJvY2VlZCh0LCB0aGlzLm9wdHMudmFyLCBwYXRoLCByZW1vdmVGdW5jdGlvbkJ5QXJnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBGdW5jdGlvbkRlY2xhcmF0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgICAgICBwcm9jZWVkKHQsIHRoaXMub3B0cy5mdW5jdGlvbiwgcGF0aCwgcmVtb3ZlRnVuY3Rpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEZ1bmN0aW9uRXhwcmVzc2lvbihwYXRoKSB7XG4gICAgICAgICAgICAgICAgcHJvY2VlZCh0LCB0aGlzLm9wdHMuZnVuY3Rpb24sIHBhdGgsIHJlbW92ZUZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iXX0=