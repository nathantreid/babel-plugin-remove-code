'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remove = void 0;

var _utils = require("../utils.js");

// -----------------------------------------
// Functions

/**
 * Remove export
 *
 * @param {object} t
 * @param {array} opts
 * @param {object} path
 */
const remove = (t, opts = [], path) => {
  if (!path || path.removed) {
    return;
  }

  let toRemove;

  if (path.type === 'ExportNamedDeclaration' || path.type === 'ExportDefaultDeclaration') {
    let properties; // Lets get the right array to iterate through

    if (!!path.declaration || !!path.node.declaration) {
      properties = path.get('declaration');

      if (!!properties.declarations || !!properties.node.declarations) {
        properties = properties.get('declarations');
      } else if (!!properties.properties || !!properties.node.properties) {
        properties = properties.get('properties');
      }
    } else if (!!path.specifiers || !!path.node.specifiers) {
      properties = path.get('specifiers');
    } // Now maybe we have something to remove!


    toRemove = properties.length && (0, _utils.getsArrItem)(opts, path, properties);
    toRemove = toRemove || [];
    toRemove = toRemove.filter(val => !!val && !val.removed);
  }

  if (toRemove && toRemove.length) {
    for (let i = 0; i < toRemove.length; i += 1) {
      toRemove[i] && !toRemove[i].removed && toRemove[i].remove();
    }
  }
}; // -----------------------------------------
// Export


exports.remove = remove;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL2V4cG9ydC5qcyJdLCJuYW1lcyI6WyJyZW1vdmUiLCJ0Iiwib3B0cyIsInBhdGgiLCJyZW1vdmVkIiwidG9SZW1vdmUiLCJ0eXBlIiwicHJvcGVydGllcyIsImRlY2xhcmF0aW9uIiwibm9kZSIsImdldCIsImRlY2xhcmF0aW9ucyIsInNwZWNpZmllcnMiLCJsZW5ndGgiLCJmaWx0ZXIiLCJ2YWwiLCJpIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUFPQSxNQUFNQSxNQUFNLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFJLEdBQUcsRUFBWCxFQUFlQyxJQUFmLEtBQXdCO0FBQ25DLE1BQUksQ0FBQ0EsSUFBRCxJQUFTQSxJQUFJLENBQUNDLE9BQWxCLEVBQTJCO0FBQUU7QUFBUzs7QUFFdEMsTUFBSUMsUUFBSjs7QUFFQSxNQUFJRixJQUFJLENBQUNHLElBQUwsS0FBYyx3QkFBZCxJQUEwQ0gsSUFBSSxDQUFDRyxJQUFMLEtBQWMsMEJBQTVELEVBQXdGO0FBQ3BGLFFBQUlDLFVBQUosQ0FEb0YsQ0FHcEY7O0FBQ0EsUUFBSSxDQUFDLENBQUNKLElBQUksQ0FBQ0ssV0FBUCxJQUFzQixDQUFDLENBQUNMLElBQUksQ0FBQ00sSUFBTCxDQUFVRCxXQUF0QyxFQUFtRDtBQUMvQ0QsTUFBQUEsVUFBVSxHQUFHSixJQUFJLENBQUNPLEdBQUwsQ0FBUyxhQUFULENBQWI7O0FBRUEsVUFBSSxDQUFDLENBQUNILFVBQVUsQ0FBQ0ksWUFBYixJQUE2QixDQUFDLENBQUNKLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkUsWUFBbkQsRUFBaUU7QUFDN0RKLFFBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDRyxHQUFYLENBQWUsY0FBZixDQUFiO0FBQ0gsT0FGRCxNQUVPLElBQUksQ0FBQyxDQUFDSCxVQUFVLENBQUNBLFVBQWIsSUFBMkIsQ0FBQyxDQUFDQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JGLFVBQWpELEVBQTZEO0FBQ2hFQSxRQUFBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0csR0FBWCxDQUFlLFlBQWYsQ0FBYjtBQUNIO0FBQ0osS0FSRCxNQVFPLElBQUksQ0FBQyxDQUFDUCxJQUFJLENBQUNTLFVBQVAsSUFBcUIsQ0FBQyxDQUFDVCxJQUFJLENBQUNNLElBQUwsQ0FBVUcsVUFBckMsRUFBaUQ7QUFDcERMLE1BQUFBLFVBQVUsR0FBR0osSUFBSSxDQUFDTyxHQUFMLENBQVMsWUFBVCxDQUFiO0FBQ0gsS0FkbUYsQ0FnQnBGOzs7QUFDQUwsSUFBQUEsUUFBUSxHQUFHRSxVQUFVLENBQUNNLE1BQVgsSUFBcUIsd0JBQVlYLElBQVosRUFBa0JDLElBQWxCLEVBQXdCSSxVQUF4QixDQUFoQztBQUNBRixJQUFBQSxRQUFRLEdBQUdBLFFBQVEsSUFBSSxFQUF2QjtBQUNBQSxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ1MsTUFBVCxDQUFnQkMsR0FBRyxJQUFJLENBQUMsQ0FBQ0EsR0FBRixJQUFTLENBQUNBLEdBQUcsQ0FBQ1gsT0FBckMsQ0FBWDtBQUNIOztBQUVELE1BQUlDLFFBQVEsSUFBSUEsUUFBUSxDQUFDUSxNQUF6QixFQUFpQztBQUM3QixTQUFLLElBQUlHLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdYLFFBQVEsQ0FBQ1EsTUFBN0IsRUFBcUNHLENBQUMsSUFBSSxDQUExQyxFQUE2QztBQUN6Q1gsTUFBQUEsUUFBUSxDQUFDVyxDQUFELENBQVIsSUFBZSxDQUFDWCxRQUFRLENBQUNXLENBQUQsQ0FBUixDQUFZWixPQUE1QixJQUF1Q0MsUUFBUSxDQUFDVyxDQUFELENBQVIsQ0FBWWhCLE1BQVosRUFBdkM7QUFDSDtBQUNKO0FBQ0osQ0FoQ0QsQyxDQWtDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IHsgZ2V0c0Fyckl0ZW0gfSBmcm9tICcuLi91dGlscy5qcyc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBGdW5jdGlvbnNcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgZXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSB0XHJcbiAqIEBwYXJhbSB7YXJyYXl9IG9wdHNcclxuICogQHBhcmFtIHtvYmplY3R9IHBhdGhcclxuICovXHJcbmNvbnN0IHJlbW92ZSA9ICh0LCBvcHRzID0gW10sIHBhdGgpID0+IHtcclxuICAgIGlmICghcGF0aCB8fCBwYXRoLnJlbW92ZWQpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgbGV0IHRvUmVtb3ZlO1xyXG5cclxuICAgIGlmIChwYXRoLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJyB8fCBwYXRoLnR5cGUgPT09ICdFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24nKSB7XHJcbiAgICAgICAgbGV0IHByb3BlcnRpZXM7XHJcblxyXG4gICAgICAgIC8vIExldHMgZ2V0IHRoZSByaWdodCBhcnJheSB0byBpdGVyYXRlIHRocm91Z2hcclxuICAgICAgICBpZiAoISFwYXRoLmRlY2xhcmF0aW9uIHx8ICEhcGF0aC5ub2RlLmRlY2xhcmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBwYXRoLmdldCgnZGVjbGFyYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghIXByb3BlcnRpZXMuZGVjbGFyYXRpb25zIHx8ICEhcHJvcGVydGllcy5ub2RlLmRlY2xhcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCdkZWNsYXJhdGlvbnMnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghIXByb3BlcnRpZXMucHJvcGVydGllcyB8fCAhIXByb3BlcnRpZXMubm9kZS5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoJ3Byb3BlcnRpZXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoISFwYXRoLnNwZWNpZmllcnMgfHwgISFwYXRoLm5vZGUuc3BlY2lmaWVycykge1xyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gcGF0aC5nZXQoJ3NwZWNpZmllcnMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vdyBtYXliZSB3ZSBoYXZlIHNvbWV0aGluZyB0byByZW1vdmUhXHJcbiAgICAgICAgdG9SZW1vdmUgPSBwcm9wZXJ0aWVzLmxlbmd0aCAmJiBnZXRzQXJySXRlbShvcHRzLCBwYXRoLCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICB0b1JlbW92ZSA9IHRvUmVtb3ZlIHx8IFtdO1xyXG4gICAgICAgIHRvUmVtb3ZlID0gdG9SZW1vdmUuZmlsdGVyKHZhbCA9PiAhIXZhbCAmJiAhdmFsLnJlbW92ZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b1JlbW92ZSAmJiB0b1JlbW92ZS5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvUmVtb3ZlLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIHRvUmVtb3ZlW2ldICYmICF0b1JlbW92ZVtpXS5yZW1vdmVkICYmIHRvUmVtb3ZlW2ldLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEV4cG9ydFxyXG5cclxuZXhwb3J0IHsgcmVtb3ZlIH07XHJcbiJdfQ==